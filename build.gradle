apply plugin: 'java'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

//sub projects configurations
subprojects {

    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    ext.libraryVersions = [
            resteasy                : '3.0.6.Final',
            hibernateValidator      : '5.1.3.Final',
            hibernateEntitymanager  : '4.3.8.Final',
            jacksonJaxrsJsonProvider: '2.5.1',
            javaxEjbApi             : '3.2',
            cdiApi                  : '1.2'
    ]

}

//Separate tests with SourceSets
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

sourceSets {
    integrationTest {
        //Set source and resources directory
        java.srcDir file('src/persona-testsuite/persona-testsuite-model/src/test/java')
        resources.srcDir file('src/persona-testsuite/persona-testsuite-model/src/test/resources')
        //Set compile and runtime classpath
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    //Custom test results directory
    def testResultsDir = file("$testResultsDir/integration")
}

//Database integration tests
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

//Separate complex setup logic into script plugin
apply from: "$rootDir/gradle/databaseSetup.gradle"

integrationTest.dependsOn startAndPrepareDatabase
integrationTest.finalizedBy stopDatabase

//Integrate tasks into build lifecycle
check.dependsOn integrationTest

//Code coverage with JaCoCo
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

//Apply JaCoCo plugin
apply plugin: "jacoco"

task jacocoIntegrationTestReport(type: JacocoReport) {
    //Also report code coverage for integration tests
    sourceSets sourceSets.main
    executionData integrationTest //executionData integTest
}

//Static code analysis tools
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
apply plugin: 'pmd'
pmd {
    ignoreFailures = true
}
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

apply plugin: "jdepend"
jdepend {
    toolVersion = '2.9.1'
    ignoreFailures = true
}

//Measure quality over time with Sonar
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

apply plugin: "sonar-runner"

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://my.server.com"
        property "sonar.jdbc.url", "jdbc:mysql://my.server.com/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "Fred Flintstone"
        property "sonar.jdbc.password", "very clever"
    }
}

subprojects {
    sonarRunner {
        sonarProperties {
            property "sonar.sourceEncoding", "UTF-8"
        }
    }
}

//versioning
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

allprojects {
    apply from: "$rootDir/gradle/versioning.gradle"
}

//Packaging the deployable artifact
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

//pone el proyecto que creara el .war
project(':persona-web') {
    apply plugin: 'war'
    task createBuildInfoFile << {
        //Creates file containing build information
        def buildInfoFile = new File("$buildDir/build-info.properties")
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props.setProperty('timestamp', project.buildTimestamp)
        props.store(buildInfoFile.newWriter(), null)
    }
    war {
        dependsOn createBuildInfoFile
        baseName = 'persona'
        //Include build info file Into WAR distribution
        from(buildDir) {
            include 'build-info.properties'
            into('WEB-INF/classes')
        }
    }
}

//defining build configuration
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

//Common configuration
/*binaryRepository {
    url = 'http://mycompany.bin.repo:8081/artifactory'
    //Read credentials from gradle.properties
    username = 'admin'
    password = 'password'
    name = 'libs-release-local'
}
//Environment specific configuration
environments {
    test {
        server {
            hostname = 'mycompany.test'
            port = 8099
            context = 'persona'
            username = 'manager' //Read credentials from gradle.properties
            password = 'manager'
        }
    }
    uat {
        server {
            hostname = 'mycompany.uat'
            port = 8199
            context = 'persona'
            //Read credentials from gradle.properties
            username = 'manager'
            password = 'manager'
        }
    }
}
//Reading build configuration
def env = project.hasProperty('env') ? project.getProperty('env') : 'test'
logger.quiet "Loading configuration for environment '$env'."

def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())
//Assign configuration to extra property
ext.config = parsedConfig
*/

//Using the Maven Publishing plugin
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

apply plugin: 'maven-publish'

//Build repositoryURL from configuration
/*def fullRepoUrl = "$config.binaryRepository.url/$config.binaryRepository.name"
publishing {
    publications {
        webApp(MavenPublication) {
            //Assign publication name and component
            from components.web
        }
    }
    repositories {
        maven {
            url fullRepoUrl
            credentials {
                username = config.binaryRepository.username
                password = config.binaryRepository.password
            }
        }
    }
}*/

//Task for downloading artifact
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

repositories {
    //Target location for downloaded artifact
    maven { url "https://github.com/sistcoop/cooperativa.git" }
}

configurations {
    war
}

dependencies {
    war "$project.group:$project.name:$project.version"
}

task downloadBinaryArchive(type: Copy) {
    from configurations.war
    into "$buildDir/download"
}

//Deployment with theCargo plugin
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

//Download artifact from binary repository and undeploy existing one
/*cargoDeployRemote.dependsOn downloadBinaryArchive, cargoUndeployRemote

//Only undeploy if URL context exists
cargoUndeployRemote {
    onlyIf appContextStatus
}
cargo {
    containerId = 'tomcat7x'
    port = config.server.port

    //Use environment-e?specific configuration
    deployable {
        file = downloadedArtifact
        context = config.server.context
    }

    //Use environment-e?specific configuration
    remote {
        hostname = config.server.hostname
        username = config.server.username
        password = config.server.password
    }
}*/

//Executing functional tests
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
/*
def functionalTestReportDir = file("$testReportDir/functional")
def functionalTestResultsDir = file("$testResultsDir/functional")

//Reuse setup properties
def functionalCommonSystemProperties =
        ['geb.env'             : 'firefox',
         'geb.build.reportsDir': reporting.file("$name/geb")]

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    testReportDir = functionalTestReportDir
    testResultsDir = functionalTestResultsDir
    systemProperties functionalCommonSystemProperties

    //Build URL from env.configuration
    systemProperty 'geb.build.baseUrl', "http://$config.server.hostname:$config.server.port/$config.server.context/"
}*/



